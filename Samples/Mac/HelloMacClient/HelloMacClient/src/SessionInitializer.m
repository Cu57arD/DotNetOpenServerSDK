//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/session/SessionInitializer.java
//


#include "Client.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ProtocolBase.h"
#include "ServerConfiguration.h"
#include "Session.h"
#include "SessionInitializer.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"

@interface ComUsOpenserverSessionSessionInitializer () {
 @public
  ComUsOpenserverClient *client_;
  jint protocolId_;
  ComUsOpenserverProtocolsProtocolBase *p_;
  JavaLangException *exception_;
}

@end

J2OBJC_FIELD_SETTER(ComUsOpenserverSessionSessionInitializer, client_, ComUsOpenserverClient *)
J2OBJC_FIELD_SETTER(ComUsOpenserverSessionSessionInitializer, p_, ComUsOpenserverProtocolsProtocolBase *)
J2OBJC_FIELD_SETTER(ComUsOpenserverSessionSessionInitializer, exception_, JavaLangException *)

static jint ComUsOpenserverSessionSessionInitializer_id__;
J2OBJC_STATIC_FIELD_GETTER(ComUsOpenserverSessionSessionInitializer, id__, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(ComUsOpenserverSessionSessionInitializer, id__, jint)

@implementation ComUsOpenserverSessionSessionInitializer

- (instancetype)initWithComUsOpenserverClient:(ComUsOpenserverClient *)client
                                      withInt:(jint)protocolId {
  ComUsOpenserverSessionSessionInitializer_initWithComUsOpenserverClient_withInt_(self, client, protocolId);
  return self;
}

- (ComUsOpenserverProtocolsProtocolBase *)initializeAsync {
  @synchronized(self) {
    JavaLangThread *t = new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, JreStrcat("$I", @"SessionInitializer", ++ComUsOpenserverSessionSessionInitializer_id__));
    [t start];
    [self waitWithLong:[((ComUsOpenserverConfigurationServerConfiguration *) nil_chk([((ComUsOpenserverClient *) nil_chk(client_)) getServerConfiguration])) getSocketTimeoutInTicks]];
  }
  if (exception_ != nil) @throw exception_;
  return p_;
}

- (void)run {
  @synchronized(self) {
    @try {
      (void) [self initialize__WithInt:protocolId_];
    }
    @catch (JavaLangException *ex) {
      exception_ = ex;
    }
    [self notifyAll];
  }
}

- (ComUsOpenserverProtocolsProtocolBase *)initialize__WithInt:(jint)protocolId {
  p_ = [((ComUsOpenserverSessionSession *) nil_chk([((ComUsOpenserverClient *) nil_chk(client_)) getSession])) initialize__WithInt:protocolId withId:[client_ getUserData]];
  return p_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComUsOpenserverClient:withInt:", "SessionInitializer", NULL, 0x1, NULL, NULL },
    { "initializeAsync", NULL, "Lcom.us.openserver.protocols.ProtocolBase;", 0x1, "Ljava.lang.Exception;", NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initialize__WithInt:", "initialize", "Lcom.us.openserver.protocols.ProtocolBase;", 0x1, "Ljava.lang.Exception;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "client_", NULL, 0x2, "Lcom.us.openserver.Client;", NULL, NULL,  },
    { "protocolId_", NULL, 0x2, "I", NULL, NULL,  },
    { "p_", NULL, 0x2, "Lcom.us.openserver.protocols.ProtocolBase;", NULL, NULL,  },
    { "exception_", NULL, 0x2, "Ljava.lang.Exception;", NULL, NULL,  },
    { "id__", "id", 0xa, "I", &ComUsOpenserverSessionSessionInitializer_id__, NULL,  },
  };
  static const J2ObjcClassInfo _ComUsOpenserverSessionSessionInitializer = { 2, "SessionInitializer", "com.us.openserver.session", NULL, 0x1, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverSessionSessionInitializer;
}

@end

void ComUsOpenserverSessionSessionInitializer_initWithComUsOpenserverClient_withInt_(ComUsOpenserverSessionSessionInitializer *self, ComUsOpenserverClient *client, jint protocolId) {
  (void) NSObject_init(self);
  self->client_ = client;
  self->protocolId_ = protocolId;
}

ComUsOpenserverSessionSessionInitializer *new_ComUsOpenserverSessionSessionInitializer_initWithComUsOpenserverClient_withInt_(ComUsOpenserverClient *client, jint protocolId) {
  ComUsOpenserverSessionSessionInitializer *self = [ComUsOpenserverSessionSessionInitializer alloc];
  ComUsOpenserverSessionSessionInitializer_initWithComUsOpenserverClient_withInt_(self, client, protocolId);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverSessionSessionInitializer)
