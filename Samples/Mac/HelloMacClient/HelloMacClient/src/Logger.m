//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/Logger.java
//


#include "ILoggerObserver.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Level.h"
#include "Logger.h"
#include "java/lang/Exception.h"

@interface ComUsOpenserverLogger () {
 @public
  id<ComUsOpenserverILoggerObserver> callback_;
}

@end

J2OBJC_FIELD_SETTER(ComUsOpenserverLogger, callback_, id<ComUsOpenserverILoggerObserver>)

@implementation ComUsOpenserverLogger

- (void)setILoggerObserverWithComUsOpenserverILoggerObserver:(id<ComUsOpenserverILoggerObserver>)callback {
  self->callback_ = callback;
}

- (jboolean)getLogDebug {
  return logDebug_;
}

- (void)setLogDebugWithBoolean:(jboolean)logDebug {
  self->logDebug_ = logDebug;
}

- (jboolean)getLogPackets {
  return logPackets_;
}

- (void)setLogPacketsWithBoolean:(jboolean)logPackets {
  self->logPackets_ = logPackets;
}

- (instancetype)init {
  ComUsOpenserverLogger_init(self);
  return self;
}

- (instancetype)initWithComUsOpenserverILoggerObserver:(id<ComUsOpenserverILoggerObserver>)callback {
  ComUsOpenserverLogger_initWithComUsOpenserverILoggerObserver_(self, callback);
  return self;
}

- (void)logWithComUsOpenserverLevelEnum:(ComUsOpenserverLevelEnum *)level
                           withNSString:(NSString *)message {
  if (level == ComUsOpenserverLevelEnum_get_Debug() && !logDebug_) return;
  if (callback_ != nil) [callback_ onLogMessageWithComUsOpenserverLevelEnum:level withNSString:message];
}

- (void)logWithJavaLangException:(JavaLangException *)ex {
  [self logWithComUsOpenserverLevelEnum:ComUsOpenserverLevelEnum_get_Error() withNSString:NSString_formatWithNSString_withNSObjectArray_(@"%1$s\x0d\n%2$s", [IOSObjectArray newArrayWithObjects:(id[]){ [((JavaLangException *) nil_chk(ex)) getMessage], [ex getStackTrace] } count:2 type:NSObject_class_()])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setILoggerObserverWithComUsOpenserverILoggerObserver:", "setILoggerObserver", "V", 0x1, NULL, NULL },
    { "getLogDebug", NULL, "Z", 0x1, NULL, NULL },
    { "setLogDebugWithBoolean:", "setLogDebug", "V", 0x1, NULL, NULL },
    { "getLogPackets", NULL, "Z", 0x1, NULL, NULL },
    { "setLogPacketsWithBoolean:", "setLogPackets", "V", 0x1, NULL, NULL },
    { "init", "Logger", NULL, 0x1, NULL, NULL },
    { "initWithComUsOpenserverILoggerObserver:", "Logger", NULL, 0x1, NULL, NULL },
    { "logWithComUsOpenserverLevelEnum:withNSString:", "log", "V", 0x1, NULL, NULL },
    { "logWithJavaLangException:", "log", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "callback_", NULL, 0x2, "Lcom.us.openserver.ILoggerObserver;", NULL, NULL,  },
    { "logDebug_", NULL, 0x4, "Z", NULL, NULL,  },
    { "logPackets_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComUsOpenserverLogger = { 2, "Logger", "com.us.openserver", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverLogger;
}

@end

void ComUsOpenserverLogger_init(ComUsOpenserverLogger *self) {
  (void) NSObject_init(self);
}

ComUsOpenserverLogger *new_ComUsOpenserverLogger_init() {
  ComUsOpenserverLogger *self = [ComUsOpenserverLogger alloc];
  ComUsOpenserverLogger_init(self);
  return self;
}

void ComUsOpenserverLogger_initWithComUsOpenserverILoggerObserver_(ComUsOpenserverLogger *self, id<ComUsOpenserverILoggerObserver> callback) {
  (void) NSObject_init(self);
  self->callback_ = callback;
}

ComUsOpenserverLogger *new_ComUsOpenserverLogger_initWithComUsOpenserverILoggerObserver_(id<ComUsOpenserverILoggerObserver> callback) {
  ComUsOpenserverLogger *self = [ComUsOpenserverLogger alloc];
  ComUsOpenserverLogger_initWithComUsOpenserverILoggerObserver_(self, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverLogger)
