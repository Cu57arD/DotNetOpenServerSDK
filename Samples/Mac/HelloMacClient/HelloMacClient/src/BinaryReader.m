//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/protocols/BinaryReader.java
//


#include "BinaryReader.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigDecimal.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"

@implementation ComUsOpenserverProtocolsBinaryReader

- (instancetype)initWithByteArray:(IOSByteArray *)buf {
  ComUsOpenserverProtocolsBinaryReader_initWithByteArray_(self, buf);
  return self;
}

- (jbyte)readByte {
  return (jbyte) [self read];
}

- (JavaUtilDate *)readDateTime {
  return new_JavaUtilDate_initWithLong_([self readLong]);
}

- (JavaMathBigDecimal *)readDecimal {
  return new_JavaMathBigDecimal_initWithLong_([self readLong]);
}

- (jint)readInt32 {
  jint retVal = [self read];
  retVal |= LShift32([self read], 8);
  retVal |= LShift32([self read], 16);
  retVal |= LShift32([self read], 24);
  return retVal;
}

- (jlong)readLong {
  jlong retVal = [self read];
  retVal |= LShift32([self read], 8);
  retVal |= LShift32([self read], 16);
  retVal |= LShift32([self read], 24);
  retVal |= LShift32([self read], 32);
  retVal |= LShift32([self read], 48);
  retVal |= LShift32([self read], 56);
  retVal |= LShift32([self read], 64);
  return retVal;
}

- (NSString *)readString {
  jint nextCharValue = [self read];
  if (nextCharValue != -1) {
    JavaLangStringBuilder *s = new_JavaLangStringBuilder_init();
    jboolean lengthKeepGoing = (nextCharValue & (LShift32(1, 7))) == (LShift32(1, 7));
    JavaUtilArrayList *lengths = new_JavaUtilArrayList_init();
    [lengths addWithId:JavaLangInteger_valueOfWithInt_(nextCharValue & (jint) 0x7F)];
    while (lengthKeepGoing) {
      nextCharValue = [self read];
      lengthKeepGoing = ((nextCharValue & (LShift32(1, 7))) == (LShift32(1, 7)));
      [lengths addWithId:JavaLangInteger_valueOfWithInt_(nextCharValue & ((jint) 0x7F))];
    }
    jint totalLength = 0;
    for (jint i = 0; i < [lengths size]; i++) totalLength += LShift32([((JavaLangInteger *) nil_chk([lengths getWithInt:i])) intValue], (7 * i));
    for (jint i = 0; i < totalLength; i++) (void) [s appendWithChar:(jchar) [self read]];
    return [s description];
  }
  return nil;
}

- (jint)readUInt16 {
  jint retVal = [self read];
  retVal |= LShift32([self read], 8);
  return retVal;
}

- (IOSIntArray *)readUInt16s {
  jint count = [self readInt32];
  IOSIntArray *retVal = [IOSIntArray newArrayWithLength:count];
  for (jint i = 0; i < count; i++) *IOSIntArray_GetRef(retVal, i) = [self readUInt16];
  return retVal;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByteArray:", "BinaryReader", NULL, 0x1, NULL, NULL },
    { "readByte", NULL, "B", 0x1, NULL, NULL },
    { "readDateTime", NULL, "Ljava.util.Date;", 0x1, NULL, NULL },
    { "readDecimal", NULL, "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "readInt32", NULL, "I", 0x1, NULL, NULL },
    { "readLong", NULL, "J", 0x1, NULL, NULL },
    { "readString", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "readUInt16", NULL, "I", 0x1, NULL, NULL },
    { "readUInt16s", NULL, "[I", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComUsOpenserverProtocolsBinaryReader = { 2, "BinaryReader", "com.us.openserver.protocols", NULL, 0x1, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverProtocolsBinaryReader;
}

@end

void ComUsOpenserverProtocolsBinaryReader_initWithByteArray_(ComUsOpenserverProtocolsBinaryReader *self, IOSByteArray *buf) {
  (void) JavaIoByteArrayInputStream_initWithByteArray_(self, buf);
}

ComUsOpenserverProtocolsBinaryReader *new_ComUsOpenserverProtocolsBinaryReader_initWithByteArray_(IOSByteArray *buf) {
  ComUsOpenserverProtocolsBinaryReader *self = [ComUsOpenserverProtocolsBinaryReader alloc];
  ComUsOpenserverProtocolsBinaryReader_initWithByteArray_(self, buf);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverProtocolsBinaryReader)
