<?xml version="1.0" encoding="utf-8"?>
<topic id="CreatingServerSideComponents" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        This topic walks you through the process of referencing the DotNetOpenServer API libraries,
        integrating the DotNetOpenServer (the server) in your application and lastly,
        configuring the server.
      </para>
      <para>
        The complete sample referenced in this topic can be found in the DotNetCloudServer SDK's <legacyBold>Samples\Server</legacyBold> directory.
        By default this is <legacyBold>C:\Upper Setting\DotNetCloudServer SDK\Samples\Server</legacyBold>.
      </para>
      <para>
        For more information on using the DotNetCloudServer Windows Service see <link
        xlink:href="UsingTheWindowsService" />.
      </para>

      <autoOutline>0</autoOutline>

    </introduction>
    
    <section address="Application">
      <title>Create a .Net Console Application</title>
      <content>
        <procedure>
          <title>To create your .Net Console Application from Visual Studio 2013:</title>
          <steps class="ordered">
            <step>
              <content>
                <para>Select <legacyBold>File > New > Project</legacyBold>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>From the .NET Framework drop-down, select <legacyBold>.Net Framework 4.5.2</legacyBold>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>From the <legacyBold>New Project</legacyBold> form, select <legacyBold>Console Application</legacyBold>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Specify a <legacyBold>Name</legacyBold> and <legacyBold>Location</legacyBold>, then click <legacyBold>OK</legacyBold>.
                </para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  Select <legacyBold>Tools > NuGet Package Manager > Package Manager Console</legacyBold>.
                  From the <legacyBold>Package Manager Console</legacyBold>,
                  set the <legacyBold>Package Source</legacyBold> to <legacyBold>nuget.org</legacyBold>.
                </para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  From the command-line type:
                </para>
                <code>
                  PM> Install-Package UpperSetting.OpenServer
                  PM> Install-Package UpperSetting.OpenServer.Protocols.KeepAlive
                  PM> Install-Package UpperSetting.OpenServer.Protocols.WinAuth.Server
                  PM> Install-Package UpperSetting.OpenServer.Protocols.HelloServer
                  PM> Install-Package log4net
                </code>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>

    <section address="app.config">
      <title>Create an Instance of the Server using the app.config</title>
      <content>
        <procedure>
          <title>To create an instance of the Server:</title>
          <steps class="ordered">
                      
            <step>
              <content>
                <para>
                  From the <legacyBold>Solution Explorer</legacyBold>, expand your project, right
                  click on <legacyBold>Program.cs</legacyBold> then select
                  <legacyBold>Open</legacyBold>.
                </para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  Create the <codeEntityReference>T:US.OpenServer.Server</codeEntityReference>.
                  For example:
                </para>
                <codeReference>Server#AppConfig</codeReference>
              </content>
            </step>
            <step>
              <content>
                <para>
                  From the <legacyBold>Solution Explorer</legacyBold>, expand your project, right
                  click on <legacyBold>app.config</legacyBold> then select
                  <legacyBold>Open</legacyBold>.
                </para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  Add the required configuration sections. For more information and a detailed
                  example which you can copy see: <link
                  xlink:href="Configuration.Windows.app.config" />
                </para>                
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>

    <section address="Programatically">
      <title>Create an Instance of the Server Programatically</title>
      <content>
        <procedure>
          <title>To create an instance of the Server:</title>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  From the <legacyBold>Solution Explorer</legacyBold>, expand your project, right click on <legacyBold>Program.cs</legacyBold> then select <legacyBold>Open</legacyBold>.
                </para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  From the Main function, create a
                  <codeEntityReference>T:US.OpenServer.Configuration.ServerConfiguration</codeEntityReference>
                  object then set any properties you want to override including SSL/TLS
                  properties.
                </para>
                <para>
                  If you want to secure your application, create a
                  <codeEntityReference>T:US.OpenServer.Protocols.WinAuth.WinAuthProtocolConfigurationServer</codeEntityReference>
                  object then add the groups and users you want to authorize access.
                </para>
                <para>
                  Create a Dictionary of
                  <codeEntityReference>T:US.OpenServer.Protocols.ProtocolConfiguration</codeEntityReference>
                  objects keyed by the unique protocol identifier that contains the following
                  three protocols:
                </para>
                <list class="bullet">
                  <listItem>
                    <para>
                      <codeEntityReference>T:US.OpenServer.Protocols.WinAuth.WinAuthProtocolServer</codeEntityReference>
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <codeEntityReference>T:US.OpenServer.Protocols.KeepAlive.KeepAliveProtocol</codeEntityReference>
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <codeEntityReference>T:US.OpenServer.Protocols.Hello.HelloProtocolServer</codeEntityReference>
                    </para>
                  </listItem>
                </list>
                <para>
                  Finally, create the
                  <codeEntityReference>T:US.OpenServer.Server</codeEntityReference> passing in the
                  <codeEntityReference>T:US.OpenServer.Configuration.ServerConfiguration</codeEntityReference>
                  and the the Dictionary of
                  <codeEntityReference>T:US.OpenServer.Protocols.ProtocolConfiguration</codeEntityReference> objects.
                  For example:
                </para>
                <codeReference>Server#Programatically</codeReference>
                <alert>
                  <para>
                    Each of the
                    <codeEntityReference>M:US.OpenServer.Server.ctor</codeEntityReference>
                    parameters can be set to null. If a parameter is set to null, the constructor
                    will create an instance of the configuration object using the default property values
                    then attempt to load the properties from the app.config file.
                  </para>
                </alert>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>
       
    <relatedTopics>
      <link xlink:href="Configuration.Windows.app.config"/>
      <link xlink:href="ServerSideComponents"/>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
