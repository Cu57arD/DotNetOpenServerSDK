<?xml version="1.0" encoding="utf-8" ?>
<!-- This is an example code snippets file -->
<examples>
  
  <item id="Server#AppConfigUsing">
    <sampleCode language="CSharp">
      using US.OpenServer;
    </sampleCode>
  </item>
  
  <item id="Server#AppConfigServer">
    <sampleCode language="CSharp">
      using System;
      using US.OpenServer;

      namespace TestServer
      {
          class Program
          {
              static void Main(string[] args)
              {
                  Server server = new Server();
                  server.Logger.Log(Level.Info, "Press any key to quit.");
                  Console.ReadKey();
                  server.Close();
              }
          }
      }
    </sampleCode>
  </item>
  
  <item id="Server#Using">
    <sampleCode language="CSharp">
      using US.OpenServer;
      using US.OpenServer.Configuration;
      using US.OpenServer.Protocols.KeepAlive;
      using US.OpenServer.Protocols.WinAuth;
      using US.OpenServer.Protocols.WinAuth.Server;
    </sampleCode>
  </item>
  
  <item id="Server#Programatically">
    <sampleCode language="CSharp">
      using System;
      using System.Collections.Generic;
      using US.OpenServer;
      using US.OpenServer.Configuration;
      using US.OpenServer.Protocols.KeepAlive;
      using US.OpenServer.Protocols.WinAuth;
      using US.OpenServer.Protocols.WinAuth.Server;

      namespace TestServer
      {
          class Program
          {
              static void Main(string[] args)
              {            
                  Logger logger = new Logger("DotNetOpenServer");
            
                  ServerConfiguration cfg = new ServerConfiguration();

                  Dictionary&lt;ushort, ProtocolConfiguration&gt; protocolConfigurations =
                      new Dictionary&lt;ushort, ProtocolConfiguration&gt;();
            
                  protocolConfigurations.Add(KeepAliveProtocol.PROTOCAL_IDENTIFIER,
                      new ProtocolConfiguration(KeepAliveProtocol.PROTOCAL_IDENTIFIER, typeof(KeepAliveProtocol)));

                  WinAuthProtocolConfigurationServer winAuthCfg = 
                      new WinAuthProtocolConfigurationServer(
                          WinAuthProtocol.PROTOCAL_IDENTIFIER,
                          typeof(WinAuthProtocolServer));
                  winAuthCfg.Roles.Add("Administrators");
                  winAuthCfg.Roles.Add("Power Users");
                  winAuthCfg.Users.Add("User1");
                  winAuthCfg.Users.Add("User2");
                  protocolConfigurations.Add(WinAuthProtocol.PROTOCAL_IDENTIFIER, winAuthCfg);

                  Server server = new Server(logger, cfg, protocolConfigurations);

                  server.Logger.Log(Level.Info, "Press any key to quit.");
                  Console.ReadKey();
                  server.Close();
              }
          }
      }
    </sampleCode>
  </item>
</examples>

