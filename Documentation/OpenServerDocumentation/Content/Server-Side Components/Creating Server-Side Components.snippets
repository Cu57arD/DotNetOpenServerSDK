<?xml version="1.0" encoding="utf-8" ?>
<!-- This is an example code snippets file -->
<examples>

  
  <item id="Server#AppConfig">
    <sampleCode language="CSharp">
      using System;
      using US.OpenServer;

      namespace HelloServer
      {
          class Program
          {
              static void Main(string[] args)
              {
                  Server server = new Server();
                  server.Logger.Log(Level.Info, "Press any key to quit.");
                  Console.ReadKey();
                  server.Close();
              }
          }
      }
    </sampleCode>
  </item>
  
  <item id="Server#Programatically">
    <sampleCode language="CSharp">
      using System;
      using System.Collections.Generic;
      using US.OpenServer;
      using US.OpenServer.Configuration;
      using US.OpenServer.Protocols;
      using US.OpenServer.Protocols.Hello;
      using US.OpenServer.Protocols.KeepAlive;
      using US.OpenServer.Protocols.WinAuth;

      namespace HelloServer
      {
          class Program
          {
              static void Main(string[] args)
              {
                  ServerConfiguration cfg = new ServerConfiguration();

                  Dictionary&lt;ushort, ProtocolConfiguration&gt; protocolConfigurations =
                      new Dictionary&lt;ushort, ProtocolConfiguration&gt;();

                  protocolConfigurations.Add(KeepAliveProtocol.PROTOCOL_IDENTIFIER,
                      new ProtocolConfiguration(KeepAliveProtocol.PROTOCOL_IDENTIFIER, typeof(KeepAliveProtocol)));

                  WinAuthProtocolConfigurationServer winAuthCfg = new WinAuthProtocolConfigurationServer();
                  winAuthCfg.AddRole("Administrators");
                  winAuthCfg.AddUser("TestUser");
                  protocolConfigurations.Add(WinAuthProtocol.PROTOCOL_IDENTIFIER, winAuthCfg);

                  protocolConfigurations.Add(HelloProtocol.PROTOCOL_IDENTIFIER,
                      new ProtocolConfiguration(HelloProtocol.PROTOCOL_IDENTIFIER, typeof(HelloProtocolServer)));

                  Server server = new Server(cfg, protocolConfigurations);

                  server.Logger.Log(Level.Info, "Press any key to quit.");
                  Console.ReadKey();

                  server.Close();
              }
          }
      }
    </sampleCode>
  </item>
</examples>

