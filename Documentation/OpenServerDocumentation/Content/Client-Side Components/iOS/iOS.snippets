<?xml version="1.0" encoding="utf-8" ?>
<examples>
  <item id="iOS#CodeH">
    <sampleCode language="Objective-C">
      #import &lt;UIKit/UIKit.h&gt;
      #import "IClientObserver.h"

      @class JavaLangException;

      @interface ViewController : UIViewController &lt;ComUsOpenserverIClientObserver&gt;

      @property (weak, nonatomic) IBOutlet UITextField *txtHost;
      @property (weak, nonatomic) IBOutlet UITextField *txtUserName;
      @property (weak, nonatomic) IBOutlet UITextField *txtPassword;
      @property (weak, nonatomic) IBOutlet UIButton *btnConnect;

      #pragma mark Public

      - (void)onConnectionLostWithJavaLangException:(JavaLangException *)ex;

      @end
    </sampleCode>
  </item>

  <item id="iOS#CodeM">
    <sampleCode language="Objective-C">
      #include "Client.h"
      #include "ConsoleLogger.h"
      #include "HelloProtocol.h"
      #include "HelloProtocolClient.h"
      #include "KeepAliveProtocol.h"
      #include "Level.h"
      #include "ProtocolConfiguration.h"
      #include "ServerConfiguration.h"
      #include "ViewController.h"
      #include "WinAuthProtocolClient.h"
      #include "java/lang/Exception.h"
      #include "java/lang/Integer.h"
      #include "java/util/HashMap.h"


      @interface ViewController ()

      @end

      @implementation ViewController

      NSString *const DISCONNECT = @"Disconnect";
      NSString *const CONNECT = @"Connect";
      ComUsOpenserverClient *client;

      - (IBAction)btnConnect_Tapped:(id)sender {
    
          @try {
              if ([self.btnConnect.currentTitle isEqualToString:(DISCONNECT)])
              {
                   if (client != nil)
                       [client close];
            
                  [self.btnConnect setTitle:CONNECT forState:UIControlStateNormal];
              }
              else
                  [self connect];
          }
          @catch (JavaLangException *ex) {
              [self messageBox:[((JavaLangException *) nil_chk(ex)) getMessage]];
          }
      }

      -(void)messageBox:(NSString *)message {
          UIAlertController* alert = [UIAlertController alertControllerWithTitle:@"DotNetOpenServer SDK"
                                                                         message:message
                                                                  preferredStyle:UIAlertControllerStyleAlert];
    
          UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault
                                                                handler:^(UIAlertAction * action) {}];
    
          [alert addAction:defaultAction];
          [self presentViewController:alert animated:YES completion:nil];
      }

      - (void)onConnectionLostWithJavaLangException:(JavaLangException *)ex {
          [self messageBox:[@"Connection lost: " stringByAppendingFormat:@"%@", [((JavaLangException *) nil_chk(ex)) getMessage]]];
          [client close];
          [self.btnConnect setTitle:CONNECT forState:UIControlStateNormal];
      }

      - (void)connect {
    
          ComUsOpenserverConsoleLogger *logger = new_ComUsOpenserverConsoleLogger_init();
          [logger setLogDebugWithBoolean:YES];
    
          ComUsOpenserverConfigurationServerConfiguration *cfg = new_ComUsOpenserverConfigurationServerConfiguration_init();
          [self.btnConnect setTitle:CONNECT forState:UIControlStateNormal];
          [cfg setHostWithNSString: self.txtHost.text];
    
          JavaUtilHashMap *protocolConfigurations = new_JavaUtilHashMap_init();
    
          (void) [protocolConfigurations putWithId:JavaLangInteger_valueOfWithInt_(ComUsOpenserverProtocolsKeepaliveKeepAliveProtocol_PROTOCOL_IDENTIFIER) withId:new_ComUsOpenserverProtocolsProtocolConfiguration_initWithInt_withNSString_(ComUsOpenserverProtocolsKeepaliveKeepAliveProtocol_PROTOCOL_IDENTIFIER, @"com.us.openserver.protocols.keepalive.KeepAliveProtocol")];
    
          (void) [protocolConfigurations putWithId:JavaLangInteger_valueOfWithInt_(ComUsOpenserverProtocolsWinauthWinAuthProtocol_PROTOCOL_IDENTIFIER) withId:new_ComUsOpenserverProtocolsProtocolConfiguration_initWithInt_withNSString_(ComUsOpenserverProtocolsWinauthWinAuthProtocol_PROTOCOL_IDENTIFIER, @"com.us.openserver.protocols.winauth.WinAuthProtocolClient")];
    
          (void) [protocolConfigurations putWithId:JavaLangInteger_valueOfWithInt_(ComUsOpenserverProtocolsHelloHelloProtocol_PROTOCOL_IDENTIFIER) withId:new_ComUsOpenserverProtocolsProtocolConfiguration_initWithInt_withNSString_(ComUsOpenserverProtocolsHelloHelloProtocol_PROTOCOL_IDENTIFIER, @"com.us.openserver.protocols.hello.HelloProtocolClient")];
    
          client = new_ComUsOpenserverClient_initWithComUsOpenserverIClientObserver_withComUsOpenserverConfigurationServerConfiguration_withJavaUtilHashMap_withComUsOpenserverLogger_withId_(self, cfg, protocolConfigurations, logger, nil);
        
          @try {
              [client connect];
        
              ComUsOpenserverProtocolsWinauthWinAuthProtocolClient *wap = (ComUsOpenserverProtocolsWinauthWinAuthProtocolClient *) check_class_cast([client initialize__WithInt:ComUsOpenserverProtocolsWinauthWinAuthProtocol_PROTOCOL_IDENTIFIER], [ComUsOpenserverProtocolsWinauthWinAuthProtocolClient class]);
        
              if (![((ComUsOpenserverProtocolsWinauthWinAuthProtocolClient *) nil_chk(wap)) authenticateWithNSString:self.txtUserName.text withNSString:self.txtPassword.text withNSString:nil]) @throw new_JavaLangException_initWithNSString_(@"Access denied.");
        
              (void) [client initialize__WithInt:ComUsOpenserverProtocolsKeepaliveKeepAliveProtocol_PROTOCOL_IDENTIFIER];
              ComUsOpenserverProtocolsHelloHelloProtocolClient *hpc = (ComUsOpenserverProtocolsHelloHelloProtocolClient *) check_class_cast([client initialize__WithInt:ComUsOpenserverProtocolsHelloHelloProtocol_PROTOCOL_IDENTIFIER], [ComUsOpenserverProtocolsHelloHelloProtocolClient class]);
        
              NSString *serverResponse = [((ComUsOpenserverProtocolsHelloHelloProtocolClient *) nil_chk(hpc)) helloWithNSString:self.txtUserName.text];
              [self messageBox:serverResponse];
        
              [self.btnConnect setTitle:DISCONNECT forState:UIControlStateNormal];
          }
          @catch (JavaLangException *ex) {
              [client close];
              @throw ex;
          }
      }

      @end
    </sampleCode>
  </item>
</examples>

