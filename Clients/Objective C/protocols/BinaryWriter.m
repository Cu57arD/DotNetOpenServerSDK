//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./com/us/openserver/protocols/BinaryWriter.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/us/openserver/protocols/BinaryWriter.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/math/BigDecimal.h"
#include "java/util/GregorianCalendar.h"

@implementation ComUsOpenserverProtocolsBinaryWriter

- (instancetype)init {
  ComUsOpenserverProtocolsBinaryWriter_init(self);
  return self;
}

- (void)writeStringWithNSString:(NSString *)value {
  if (value == nil) value = @"";
  IOSCharArray *chars = [((NSString *) nil_chk(value)) toCharArray];
  jint num = ((IOSCharArray *) nil_chk(chars))->size_;
  while (num >= 128) {
    [self writeWithInt:(jchar) (num | 128)];
    RShiftAssignInt(&num, 7);
  }
  [self writeWithInt:(jchar) (num)];
  for (jint i = 0; i < chars->size_; i++) [self writeWithInt:IOSCharArray_Get(chars, i)];
}

- (void)writeIntWithInt:(jint)value {
  [self writeWithInt:(jbyte) value];
  [self writeWithInt:(jbyte) (RShift32(value, 8))];
  [self writeWithInt:(jbyte) (RShift32(value, 16))];
  [self writeWithInt:(jbyte) (RShift32(value, 24))];
}

- (void)writeUIntWithInt:(jint)value {
  [self writeWithInt:(jbyte) value];
  [self writeWithInt:(jbyte) (RShift32(value, 8))];
  [self writeWithInt:(jbyte) (RShift32(value, 16))];
  [self writeWithInt:(jbyte) (RShift32(value, 24))];
}

- (void)writeUInt16WithInt:(jint)value {
  [self writeWithInt:(jbyte) value];
  [self writeWithInt:(jbyte) (RShift32(value, 8))];
}

- (void)writeWithJavaUtilGregorianCalendar:(JavaUtilGregorianCalendar *)date {
  [self writeWithLong:[((JavaUtilGregorianCalendar *) nil_chk(date)) getTimeInMillis]];
}

- (void)writeWithLong:(jlong)value {
  [self writeWithInt:(jbyte) value];
  [self writeWithInt:(jbyte) (RShift64(value, 8))];
  [self writeWithInt:(jbyte) (RShift64(value, 16))];
  [self writeWithInt:(jbyte) (RShift64(value, 24))];
  [self writeWithInt:(jbyte) (RShift64(value, 32))];
  [self writeWithInt:(jbyte) (RShift64(value, 40))];
  [self writeWithInt:(jbyte) (RShift64(value, 48))];
  [self writeWithInt:(jbyte) (RShift64(value, 56))];
  [self writeWithInt:(jbyte) (RShift64(value, 64))];
}

- (void)writeWithJavaMathBigDecimal:(JavaMathBigDecimal *)value {
  [self writeStringWithNSString:[((JavaMathBigDecimal *) nil_chk(value)) description]];
}

- (void)writeUInt16sWithIntArray:(IOSIntArray *)value {
  if (value == nil) {
    [self writeWithInt:(jint) 0];
  }
  else {
    [self writeWithInt:value->size_];
    {
      IOSIntArray *a__ = value;
      jint const *b__ = a__->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint i = *b__++;
        [self writeUInt16WithInt:i];
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BinaryWriter", NULL, 0x1, NULL, NULL },
    { "writeStringWithNSString:", "writeString", "V", 0x1, NULL, NULL },
    { "writeIntWithInt:", "writeInt", "V", 0x1, NULL, NULL },
    { "writeUIntWithInt:", "writeUInt", "V", 0x1, NULL, NULL },
    { "writeUInt16WithInt:", "writeUInt16", "V", 0x1, NULL, NULL },
    { "writeWithJavaUtilGregorianCalendar:", "write", "V", 0x1, NULL, NULL },
    { "writeWithLong:", "write", "V", 0x1, NULL, NULL },
    { "writeWithJavaMathBigDecimal:", "write", "V", 0x1, NULL, NULL },
    { "writeUInt16sWithIntArray:", "writeUInt16s", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComUsOpenserverProtocolsBinaryWriter = { 2, "BinaryWriter", "com.us.openserver.protocols", NULL, 0x1, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComUsOpenserverProtocolsBinaryWriter;
}

@end

void ComUsOpenserverProtocolsBinaryWriter_init(ComUsOpenserverProtocolsBinaryWriter *self) {
  (void) JavaIoByteArrayOutputStream_init(self);
}

ComUsOpenserverProtocolsBinaryWriter *new_ComUsOpenserverProtocolsBinaryWriter_init() {
  ComUsOpenserverProtocolsBinaryWriter *self = [ComUsOpenserverProtocolsBinaryWriter alloc];
  ComUsOpenserverProtocolsBinaryWriter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComUsOpenserverProtocolsBinaryWriter)
